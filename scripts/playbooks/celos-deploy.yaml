---
# Playbook to perform integration testing on Celos
#
# Performs various tests against the servlets.

- hosts: host
  gather_facts: no
  vars:
    root: "../.."
    service_user: "{{ ansible_ssh_user }}"
    prefix: "/home/{{ service_user }}/local"
    service_dir: "{{ prefix }}/service/{{ service_name }}"
    runit_restart: "{{ root }}/scripts/runit-restart-service.sh"
    start_script_path: "{{ prefix }}/bin/{{ service_name}}"
    dest_jar_path: "{{ prefix }}/lib/{{ service_name}}.jar"
    stdout_log_path: "{{ prefix }}/log/{{ service_name }}"

  tasks:

  - ping:

  - name: "assert version non empty"
    when: service_version == ""
    fail:

  - when: celos_defaults_dir is defined
    file: dest={{ celos_defaults_dir }} state=directory
  - when: celos_workflows_dir is defined
    file: dest={{ celos_workflows_dir }} state=directory
  - when: celos_db_dir is defined
    file: dest={{ celos_db_dir }} state=directory

  - file: dest={{ service_dir }} state=directory
  - file: dest={{ service_dir }}/log state=directory
  - file: state=directory dest={{ stdout_log_path }}

  - file: state=directory dest={{ prefix }}/lib
  - copy: src={{ jar_path }} dest={{ dest_jar_path }}

  - name: Stop service if exists, overwise ignore errors
    shell: "/sbin/sv stop {{service_name}} && /sbin/sv stop {{service_name}}/log"
    ignore_errors: yes

  - file: state=directory dest={{ prefix }}/bin
  - template: src={{root}}/scripts/templates/service-start.tpl dest={{ start_script_path }} owner={{ service_user }} mode=0755

  - template: src={{root}}/scripts/templates/run.tpl dest="{{ service_dir }}/run" owner={{ service_user }} mode=0755
  - template: src={{root}}/scripts/templates/check.tpl dest="{{ service_dir }}/check" owner={{ service_user }} mode=0755
  - template: src={{root}}/scripts/templates/log-run.tpl dest="{{ service_dir }}/log/run" owner={{ service_user }} mode=0755

  - file: state=directory dest={{ service_dir }}/supervise mode=0755
  - shell: "[ -p {{ service_dir }}/supervise/ok ]      || mkfifo {{ service_dir }}/supervise/ok"
  - shell: "[ -p {{ service_dir }}/supervise/control ] || mkfifo {{ service_dir }}/supervise/control"

  - file: state=directory dest={{ service_dir }}/log/supervise mode=0755
  - shell: "[ -p {{ service_dir }}/log/supervise/ok ]      || mkfifo {{ service_dir }}/log/supervise/ok"
  - shell: "[ -p {{ service_dir }}/log/supervise/control ] || mkfifo {{ service_dir }}/log/supervise/control"

  - script: "{{ runit_restart }} --SERVICE_NAME {{ service_name }} --SERVICE_DIR {{ service_dir }}"

  - register: result
    local_action:
      module: uri
      url: "http://{{inventory_hostname}}:{{service_port}}/version"
      return_content: yes
  - name: Check servlet /version correctness
    when: result.content != service_version
    fail:
